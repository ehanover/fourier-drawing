/*

This drawing algorithm used to be on a different site written in Vuejs. This code
is an outdated Vue version of the code that is behind this new site. I didn't
want to get rid of it because it might be useful later. Converting the code
back and forth between languages is a big pain.

*/



<template>

<div class="fourier">
	<!-- <h2>Plain text</h2> -->

	<div id="wrapper"> <!-- had class="d-flex"  --> <!-- stolen from https://startbootstrap.com/templates/simple-sidebar/  --> 

		<!-- Sidebar -->
		<!-- <div id="sidebar-wrapper"> --> <!-- had class class="bg-light border-right" -->
			<!-- <div class="sidebar-heading">Menu</div> -->
			<h3 class="sidebar-heading">Options</h3>

			<div class="list-group list-group-flush"> <!-- <div class="btn-group-vertical btn-group-lg"> -->
				<button type="button" v-bind:class="{ 'btn btn-primary': isDrawing, 'btn btn-outline-primary': !isDrawing }" v-on:click="drawMode();">Draw Mode</button>
				<button type="button" v-bind:class="{ 'btn btn-primary': !isDrawing, 'btn btn-outline-primary': isDrawing }" v-on:click="animateMode();">Animate Mode</button>
			</div>

			<div id="sidebar-inputs" class="text-center">
				<br>
				Resolution: {{numCircles}} <input v-model="numCircles" placeholder="6" type="range" min="1" max="10">
				<br>
				Drawing speed: {{drawSpeed}} <input v-model="drawSpeed" placeholder="50" type="range">

				<a href="https://youtu.be/r6sGWTCMz2k" target="_tab" class="list-group-item list-group-item-action bg-light">Algorithm Information</a>
				<a href="https://github.com/ehanover" target="_tab" class="list-group-item list-group-item-action bg-light">View Source Code</a>
				
			</div>
	</div> <!-- /#sidebar-wrapper -->

	<div align="center"> <!-- Page Content -->

		<!-- <div> --> <!--class="d-flex"-->
			<!-- <h1 class="mt-4">Fourier Drawing</h1> -->
			<!-- <h5>Create a drawing using "draw mode", and watch the algorithm draw it in "animate mode." Edit the settings in the menu to change the algorithm's behavior.</h5> -->
		<canvas id="myCanvas" ref="myCanvasRef" width="100" height="100">Your browser does not support the HTML5 canvas tag.</canvas> <!-- style="border:1px solid" -->

		<!-- </div> -->

	</div> <!-- /#page-content-wrapper -->

</div>

</template>


<script> //<!-- type="text/javascript" -->

//import 'curve_calc.js' from 'cardinal-spline-js';
//import 'cardinal-spline-js/curve_calc.js';
import { getCurvePoints } from 'cardinal-spline-js/curve_calc.min.js'; //https://www.npmjs.com/package/cardinal-spline-js
import { add, multiply, divide, complex, pow } from 'mathjs';
//import 'cardinal-spline-js/curve_calc.min.js';
//require('cardinal-spline-js/curve_calc.min.js');

export default {
	name: 'fourier',

	data(){
		return{
			isDrawing: true,
			mouseDown: false,
			numCircles: 3,
			drawSpeed: 30,
			history: [],
			historySize: 70,

			points: [],
			interval: null,
			t: 0,
			coeffs: [],

			canvas: null,
			ctx: null,
			sizeX: 0,
			sizeY: 0,
			offsetX: 0,
			offsetY: 0,
		};
	},
	mounted(){
		this.setupCanvas();
		this.updateCanvasDraw();	
	},
	methods: {
		handleMouseDown(e){
			this.points = [];
			this.mouseDown = true;
		},
		handleMouseUp(e){
			this.mouseDown = false;
		},
		handleMouseMove(e){
			if(this.isDrawing && this.mouseDown){
				//console.log("adding points");
				this.points.push([e.offsetX, e.offsetY]);
				this.updateCanvasDraw(); // TODO don't erase the whole thing every time, only draw new points when in draw mode
			}
		},
		/*getPathSize(path){
			var xs = [];
			var ys = [];
			for(var i=0; i<path.length-1; i+=2*2){ // adjust +=2*x to determine resolution
				xs.push(path[i]);
				ys.push(path[i+1]);
			}
			var minx = Math.min(...xs);
			var miny = Math.min(...ys);
			return [minx, miny, Math.max(...xs)-minx, Math.max(...ys)-miny];

		},*/
		simpleCCalc(pathX, pathY, sub){
			var steps = 400.0;
			var pathLength = pathX.length;
			var bigsum = 0;
			for (var bigi = 0; bigi < steps; bigi++) { // approximates integral by using "steps"
				var i = bigi/steps; // basically percentage along the curve
				var pointIndex = Math.floor(i*pathLength);
				var pointx = pathX[pointIndex];
				var pointy = pathY[pointIndex];
				//var pointxScaled = (pointx-(pathSize[0]+pathSize[2]/2))/pathSize[2];
				//var pointyScaled = (pointy-(pathSize[1]+pathSize[3]/2))/pathSize[3];
				var pointxScaled = (pointx-this.sizeX/2)/(this.sizeX/2);
				var pointyScaled = (pointy-this.sizeY/2)/(this.sizeX/2);
				//var pointUnscaled = imagToCoords(complex(pointxScaled, pointyScaled));
				//var pointComplex = complex(pointx, pointy);
				var pointComplex = complex(pointxScaled, pointyScaled);
				var powPart = pow(Math.E, complex(0, -sub*2*Math.PI*i));
				var adding = multiply(pointComplex, powPart);
				//console.log("pointC: " + pointComplex + ",\n pow: " + powPart + ",\n adding " + adding);
				bigsum = add(bigsum, adding);
			}
			return divide(bigsum, steps);
		},
		imagToCoords(num){
			return [(num.re*(this.sizeX/2))+this.sizeX/2, (num.im*(this.sizeX/2))+this.sizeY/2]
		},
		generateAnimation(){ // TODO allow changing resolution during the animation
			var pointsFlat = this.points.flat(1);
			var pathRaw = getCurvePoints(pointsFlat, 0.25, 5, true); // third argument determines curve resolution
			var pathX = [];
			var pathY = [];
			for (var i = 0; i < pathRaw.length-1; i+=2) {
				pathX.push(pathRaw[i]);
				pathY.push(pathRaw[i+1]);
			}

			this.ctx.fillStyle = "rgb(255,0,0)";
			for (var i = 0; i < pathX.length; i++) {
				this.ctx.beginPath();
				this.ctx.arc(pathX[i], pathY[i], 2, 1, 2*Math.PI);
				this.ctx.fill();
			}

			// var pathSize = this.getPathSize(pathRaw);
			// this.ctx.beginPath();
			// this.ctx.rect(pathSize[0], pathSize[1], pathSize[2], pathSize[3]);
			// this.ctx.stroke();

			for (var i = -this.numCircles; i < this.numCircles; i++) {
				this.coeffs.push(this.simpleCCalc(pathX, pathY, i));
			}

			this.interval = setInterval(this.runAnimation, 60);		
		},

		drawMode(){
			clearInterval(this.interval);
			this.points = [];
			this.updateCanvasDraw();
			this.isDrawing = true;
		},
		animateMode(){
			clearInterval(this.interval); // TODO need this?
			this.coeffs = [];
			this.history = [];
			this.isDrawing = false;
			this.generateAnimation();
		},

		setupCanvas(){
			this.canvas = document.getElementById('myCanvas');
			this.ctx = this.canvas.getContext('2d');

			this.sizeX = window.innerWidth;
			this.sizeY = window.innerHeight;
			this.canvas.width = this.sizeX-20;
			this.canvas.height = this.sizeY-60; // TODO account for height in components above this
			this.offsetX = this.sizeX/2;
			this.offsetY = this.sizeY/2;

			this.canvas.addEventListener('mousedown', this.handleMouseDown);
			this.canvas.addEventListener('mouseup', this.handleMouseUp);
			this.canvas.addEventListener('mousemove', this.handleMouseMove);
		},
		updateCanvasDraw(){
			this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
			this.ctx.fillStyle = "black";
			this.ctx.font="12px Georgia";
			this.ctx.fillText("Points: " + this.points.length, 20, this.sizeY-80);

			this.ctx.fillStyle = "blue";
			this.ctx.fillRect(this.offsetX-2, this.offsetY-2, 4, 4);

			this.ctx.fillStyle = "black";
			for (var i = this.points.length - 1; i >= 0; i--) {
				//this.ctx.fillCircle(this.points[i][0], this.points[i][1], 4, 4); 
				this.ctx.beginPath();
				this.ctx.arc(this.points[i][0], this.points[i][1], 4, 1, 2*Math.PI);
				this.ctx.fill();
			}
		},

		runAnimation(){
			this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
			//console.log("starting with circles=" + this.numCircles + ", cfs.l=" + this.coeffs.length);
			this.t += 0.025*(parseInt(this.drawSpeed)/100);
			if(this.t >= 1){
				this.t = 0;
			}

			this.ctx.fillStyle = "black";
			for (var i = this.points.length - 1; i >= 0; i--) {
				this.ctx.beginPath();
				this.ctx.arc(this.points[i][0], this.points[i][1], 4, 1, 2*Math.PI);
				this.ctx.fill();
			}

			this.ctx.fillStyle = "blue";
			for (var i = this.history.length - 1; i >= 0; i--) {
				this.ctx.beginPath();
				this.ctx.arc(this.history[i][0], this.history[i][1], 3, 1, 2*Math.PI);
				this.ctx.fill();
			}

			var finalPoint_c = complex(0, 0);
			var oldPoint = [this.offsetX, this.offsetY];

			for (var i = -this.numCircles; i < this.numCircles; i++) {
				var newPoint_c = multiply(this.coeffs[i+parseInt(this.numCircles)], pow(Math.E, complex(0, -i*2*Math.PI*this.t)));
				//var newPoint = this.imagToCoords(newPoint_c);
				var newPoint_rad = (this.sizeX/2)*Math.hypot(newPoint_c.re, newPoint_c.im);
				//var newPoint_rad = Math.hypot((this.sizeX/2)*newPoint_c.re, (this.sizeY/2)*newPoint_c.im);
				//var newPoint_rad = 50;
				var latestPoint = this.imagToCoords(finalPoint_c);

				// large circle
				this.ctx.fillStyle = "black";
				this.ctx.beginPath();
				this.ctx.arc(latestPoint[0], latestPoint[1], newPoint_rad, 0, 2*Math.PI);
				this.ctx.stroke();

				this.ctx.fillStyle = "grey";
				this.ctx.beginPath();
				this.ctx.arc(latestPoint[0], latestPoint[1], 2, 0, 2*Math.PI);
				this.ctx.fill();

				this.ctx.fillStyle = "black";
				this.ctx.beginPath();
				this.ctx.moveTo(latestPoint[0], latestPoint[1]);
				this.ctx.lineTo(oldPoint[0], oldPoint[1]);
				this.ctx.stroke();
				//this.ctx.moveTo(0, 0);

				finalPoint_c = add(finalPoint_c, newPoint_c);
				oldPoint = latestPoint;
			}

			var finalPoint = this.imagToCoords(finalPoint_c);
			this.ctx.fillStyle = "red";
			this.ctx.beginPath();
			this.ctx.arc(finalPoint[0], finalPoint[1], 4, 1, 2*Math.PI);
			this.ctx.fill();

			this.history.push(finalPoint);
			if (this.history.length > this.historySize){
				this.history.shift();
			}
		}

	},
}

</script>


<style scoped>
/*Start Bootstrap - Simple Sidebar (https://startbootstrap.com/template-overviews/simple-sidebar), Copyright 2013-2019 Start Bootstrap, Licensed under MIT (https://github.com/BlackrockDigital/startbootstrap-simple-sidebar/blob/master/LICENSE)*/

#wrapper {
	position: absolute;
	margin: 3em;
	padding: 15px;

	border: 2px solid black;
	border-radius: 5px;
}

#sidebar-inputs {
	/*align: right;*/
	/*background-color: blue;*/
	width: 170px;
}
/*#sidebar-wrapper {
  min-height: 100vh;
  margin-left: -15rem;
  -webkit-transition: margin .25s ease-out;
  -moz-transition: margin .25s ease-out;
  -o-transition: margin .25s ease-out;
  transition: margin .25s ease-out;
}*/

/*#sidebar-wrapper {
	position:fixed;
}

#sidebar-wrapper .sidebar-heading {
  padding: 0.875rem 1.25rem;
  font-size: 1.2rem;
}

#sidebar-wrapper .list-group {
  width: 15rem;
}*/

/*#page-content-wrapper {
  min-width: 100vw;
}
*/
/*#wrapper.toggled #sidebar-wrapper {
  margin-left: 0;
}*/

/*@media (min-width: 768px) {
  #sidebar-wrapper {
	margin-left: 0;
  }

  #page-content-wrapper {
	min-width: 0;
	width: 100%;
  }

  #wrapper.toggled #sidebar-wrapper {
	margin-left: -15rem;
  }
}*/
</style>
